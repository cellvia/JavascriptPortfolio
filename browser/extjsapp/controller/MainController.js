/*
 * File: app/controller/MainController.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.MainController', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            ref: 'WorkArea',
            selector: '#work'
        },
        {
            ref: 'TopBar',
            selector: '#top'
        },
        {
            ref: 'RegisterUserForm',
            selector: '#registerForm'
        },
        {
            ref: 'LoginForm',
            selector: '#loginForm'
        },
        {
            ref: 'CreateEventForm1',
            selector: '#createEventForm1'
        },
        {
            ref: 'CreateEventForm2',
            selector: '#createEventForm2'
        }
    ],

    onLoginButtonClick: function(button, e, options) {
        var loginForm = this.getLoginForm().getForm().getValues();
        var me = this;
        var conn = new Ext.data.Connection();
        conn.request({
            method: 'POST',
            url: '/login',
            params: {
                loginName: loginForm.email,
                loginPass: loginForm.password
            },
            success: function(responseObject) { 
                var newData = Ext.decode(responseObject.responseText);
                if(!me.handleErrors(newData)){
                    FundilioUser = newData.data;
                    if(FundilioUser.email && FundilioUser.email == loginForm.email.toLowerCase()){
                        me.refreshWorkArea('EventPanel1');        
                    }
                }
            },
            failure: function(err) { console.log(err); alert("Failed login!"); }
        });

    },

    onLogoutButtonClick: function(button, e, options) {

        var me = this;

        if(typeof FundilioUser != "undefined"){
            var conn = new Ext.data.Connection();
            conn.request({
                method: 'POST',
                url: '/logout',
                success: function(responseObject) { 
                    //var newData = Ext.decode(responseObject.responseText);
                    //if(newData.logout === "success"){
                    //}      
                },
                failure: function(err) { console.log(err); alert("Error logging out!"); }
            });
            delete FundilioUser;
            me.refreshWorkArea('LoginPanel');
        }
    },

    onViewportAfterRender: function(abstractcomponent, options) {
        this.refreshWorkArea('LoginPanel');
    },

    onRegisterButtonClick: function(button, e, options) {
        this.refreshWorkArea('RegisterPanel');
    },

    onStep1NextButtonClick: function(button, e, options) {
        var me = this;
        var eventForm = this.getCreateEventForm1().getForm().getValues();
        var conn = new Ext.data.Connection();
        if(!FundilioUser.loadedEvent || Ext.isEmpty(FundilioUser.loadedEvent)){ 
            conn.request({
                method: 'POST',
                url: '/createEvent',
                params: {
                    panel: 1,
                    eventTitle: eventForm.eventTitle,
                    eventDate: eventForm.eventDate,
                    eventStartTime: eventForm.eventStartTime,        
                    //eventEndTime: eventForm.eventEndTime,        
                    eventLocation: eventForm.eventLocation || "",
                    eventDescription: "",        
                    eventInvitees: [],        
                    eventItems: ""
                },
                success: function(responseObject) { 
                    var newData = Ext.decode(responseObject.responseText);
                    if(!me.handleErrors(newData)){
                        FundilioUser.loadedEvent = newData.data;            
                        me.refreshWorkArea('EventPanel2');    
                    }
                },
                failure: function(err) { console.log(err); alert("failed"); }
            });
        }else{
            conn.request({
                method: 'POST',
                url: '/updateEvent',
                params: {
                    panel: 1,
                    eventId:  FundilioUser.loadedEvent.id,
                    eventTitle: eventForm.eventTitle,
                    eventDate: eventForm.eventDate,
                    eventStartTime: eventForm.eventStartTime,        
                    //eventEndTime: eventForm.eventEndTime,        
                    eventLocation: eventForm.eventLocation || "",
                    eventDescription: FundilioUser.loadedEvent.description || "",        
                    eventInvitees: FundilioUser.loadedEvent.invitees || [],
                    eventItems: FundilioUser.loadedEvent.items || ""
                },
                success: function(responseObject) { 
                    var newData = Ext.decode(responseObject.responseText);
                    if(!me.handleErrors(newData)){
                        FundilioUser.loadedEvent = newData.data;            
                        me.refreshWorkArea('EventPanel2');    
                    }
                },
                failure: function(err) { console.log(err); alert("failed"); }
            });
        }
    },

    onStep2NextButtonClick: function(button, e, options) {
        var me = this;
        var eventForm = this.getCreateEventForm2().getForm().getValues();
        var conn = new Ext.data.Connection();
        conn.request({
            method: 'POST',
            url: '/updateEvent',
            params: {
                panel: 2,
                eventId:  FundilioUser.loadedEvent.id,
                eventTitle: FundilioUser.loadedEvent.title,
                eventDate: FundilioUser.loadedEvent.date,
                eventStartTime: FundilioUser.loadedEvent.startTime,
                //eventEndTime: eventForm.eventEndTime,        
                eventLocation: FundilioUser.loadedEvent.location || "",
                eventDescription: eventForm.eventDescription || "",        
                eventInvitees: eventForm.eventInvitees || "",        
                eventItems: eventForm.eventItems || ""                
            },
            success: function(responseObject) { 
                var newData = Ext.decode(responseObject.responseText);
                if(!me.handleErrors(newData)){
                    FundilioUser = newData.data;            
                    me.refreshWorkArea('SummaryPanel');    
                }
            },
            failure: function(err) { console.log(err); alert("failed"); }
        });
    },

    onEditButtonClick: function(button, e, options) {
        this.refreshWorkArea('EventPanel1');
    },

    onRegisterUserClick: function(button, e, options) {
        var me = this;
        var registerForm = this.getRegisterUserForm().getForm().getValues();
        var conn = new Ext.data.Connection();
        conn.request({
            method: 'POST',
            url: '/createUser',
            params: {
                email: registerForm.email,
                password: registerForm.password,
                confirm: registerForm.confirm        
            },
            success: function(responseObject) { 
                var newData = Ext.decode(responseObject.responseText);
                if(!me.handleErrors(newData)){
                    alert("Please check your email to verify your account!"); 
                    me.refreshWorkArea('LoginPanel');
                }        
            },
            failure: function(err) { console.log(err); alert("Failed"); }
        });
    },

    onStep2BackButtonClick: function(button, e, options) {
        var me = this;
        var eventForm = this.getCreateEventForm2().getForm().getValues();
        var conn = new Ext.data.Connection();
        conn.request({
            method: 'POST',
            url: '/updateEvent',
            params: {
                panel: 2,
                eventId:  FundilioUser.loadedEvent.id,
                eventTitle: FundilioUser.loadedEvent.title,
                eventDate: FundilioUser.loadedEvent.date,
                eventStartTime: FundilioUser.loadedEvent.startTime,
                //eventEndTime: eventForm.eventEndTime,        
                eventLocation: FundilioUser.loadedEvent.location || "",
                eventDescription: eventForm.eventDescription || "",        
                eventInvitees: ( eventForm.eventInvitees && (eventForm.eventInvitees[0] == 0 || Ext.isEmpty(eventForm.eventInvitees)) ) ? [] : eventForm.eventInvitees,
                eventItems: eventForm.eventItems || ""        
            },
            success: function(responseObject) { 
                var newData = Ext.decode(responseObject.responseText);
                if(!me.handleErrors(newData)){
                    FundilioUser = newData.data;            
                    me.refreshWorkArea('EventPanel1');    
                }
            },
            failure: function(err) { me.refreshWorkArea('EventPanel1'); }
        });
    },

    onRegisterPanelLoginButtonClick: function(button, e, options) {
        this.refreshWorkArea('LoginPanel');
    },

    onCreateForm1AfterLayout: function(abstractcontainer, layout, options) {
        var theEvent = FundilioUser.loadedEvent;
        if(theEvent && theEvent != ""){
            this.getCreateEventForm1().getForm().setValues({
                eventTitle: theEvent.title,
                eventDate: theEvent.date,
                eventStartTime: theEvent.startTime,
                eventLocation: theEvent.location
            });
        }
    },

    onCreateForm2AfterLayout: function(abstractcontainer, layout, options) {
        var theEvent = FundilioUser.loadedEvent;
        if(theEvent && theEvent != ""){
            this.getCreateEventForm2().getForm().setValues({
                eventDescription: FundilioUser.loadedEvent.description,        
                eventInvitees: FundilioUser.loadedEvent.invitees,        
                eventItems: FundilioUser.loadedEvent.items
            });
        }
    },

    onSendButtonClick: function(button, e, options) {
        var me = this;
        var conn = new Ext.data.Connection();
        conn.request({
            method: 'POST',
            url: '/updateEvent',
            params: {
                panel: "send",
                eventId:  FundilioUser.loadedEvent.id,
                eventTitle: FundilioUser.loadedEvent.title,
                eventDate: FundilioUser.loadedEvent.date,
                eventStartTime: FundilioUser.loadedEvent.startTime,
                //eventEndTime: eventForm.eventEndTime,        
                eventLocation: FundilioUser.loadedEvent.location || "",
                eventDescription: FundilioUser.loadedEvent.description || "",        
                eventInvitees: FundilioUser.loadedEvent.invitees,
                eventItems: FundilioUser.loadedEvent.items || ""        
            },
            success: function(responseObject) { 
                var newData = Ext.decode(responseObject.responseText);
                if(!me.handleErrors(newData)){
                    FundilioUser.events = newData.data.events;
                    FundilioUser.completeEvents = newData.data.completeEvents;
                    FundilioUser.friendsInvited = newData.data.friendsInvited;           
                    me.refreshWorkArea('MyAccountPanel');    
                }
            },
            failure: function(err) { alert("Error sending event!"); }
        });
    },

    onComboboxBeforeRender: function(abstractcomponent, options) {
        abstractcomponent.store.loadData(FundilioUser.contacts);
    },

    onLoginFBButtonClick: function(button, e, options) {
        window.location.href = "/auth/facebook/";
    },

    onMyAccountButtonClick: function(button, e, options) {
        var me = this;
        var conn = new Ext.data.Connection();
        conn.request({
            method: 'POST',
            url: '/myAccount',
            success: function(responseObject) { 
                var newData = Ext.decode(responseObject.responseText);
                if(!me.handleErrors(newData)){
                    FundilioUser.events = newData.data.events;
                    FundilioUser.completeEvents = newData.data.completeEvents;
                    FundilioUser.friendsInvited = newData.data.friendsInvited;
                    me.refreshWorkArea('MyAccountPanel');    
                }
            },
            failure: function(err) { console.log(err); alert("failed"); }
        });
    },

    onDataviewBeforeRender: function(abstractcomponent, options) {
        abstractcomponent.store.loadData(FundilioUser.events);
    },

    onCreateEventClick: function(button, e, options) {
        delete FundilioUser.loadedEvent;
        this.refreshWorkArea('EventPanel1');
    },

    refreshWorkArea: function(panelname, whichTop) {
        var work = this.getWorkArea();
        work.removeAll();
        var settingsbar = this.getTopBar();
        settingsbar.removeAll();
        //if(whichTop == 'settingsbar'){
        if(typeof FundilioUser != "undefined" && FundilioUser.email && FundilioUser.email != ""){
            settingsbar.add(Ext.create(MyApp.view.SettingsBar));
        }
        work.add(Ext.create(MyApp.view[panelname]));
        work.doLayout();
    },

    onLaunch: function() {
        // Remove the ugly Facebook appended hash
        // <https://github.com/jaredhanson/passport-facebook/issues/12>
        if (window.location.hash && window.location.hash === "#_=_") {
            // If you are not using Modernizr, then the alternative is:
            if (window.history && history.pushState) {
                //if (Modernizr.history) {
                window.history.pushState("", document.title, window.location.pathname);
            } else {
                // Prevent scrolling by storing the page's current scroll offset
                var scroll = {
                    top: document.body.scrollTop,
                    left: document.body.scrollLeft
                };
                window.location.hash = "";
                // Restore the scroll offset, should be flicker free
                document.body.scrollTop = scroll.top;
                document.body.scrollLeft = scroll.left;
            }
        }

        var me = Ext.create(MyApp.controller.MainController);
        var conn = new Ext.data.Connection();
        var params = Ext.urlDecode(location.search.substring(1));
        conn.request({
            method: 'POST',
            url: '/check',
            params: params,
            success: function(responseObject) { 
                var newData = Ext.decode(responseObject.responseText);
                if(!me.handleErrors(newData)){
                    if(newData.data.email && newData.data.email != false){
                        FundilioUser = newData.data;
                        me.refreshWorkArea('EventPanel1');        
                    }else if(newData.data.title && newData.data.title != false){
                        FundilioUser = typeof FundilioUser != "undefined" ? FundilioUser : {};
                        FundilioUser.loadedEvent = newData.data;
                        me.refreshWorkArea('ViewEventPanel');                        
                    }
                }
            }
        });
    },

    handleErrors: function(newData) {
        var errorObj = newData.errors;
        if(!Ext.isEmpty(errorObj)){    
            var alertme = "";
            if(typeof errorObj == "string"){
                alertme = newData.errors;
            }else{
                lastError = errorObj;
                errorObj.forEach(function(error){
                    alertme = alertme + "\n" + error;
                });
            }
            alert(alertme);
            return true;
        }
        return false;
    },

    init: function(application) {
        this.control({
            "#loginButton": {
                click: this.onLoginButtonClick
            },
            "#logoutButton": {
                click: this.onLogoutButtonClick
            },
            "viewport": {
                afterrender: this.onViewportAfterRender
            },
            "#registerButton": {
                click: this.onRegisterButtonClick
            },
            "#step1Next": {
                click: this.onStep1NextButtonClick
            },
            "#step2Next": {
                click: this.onStep2NextButtonClick
            },
            "#edit": {
                click: this.onEditButtonClick
            },
            "#registerUserButton": {
                click: this.onRegisterUserClick
            },
            "#step2Back": {
                click: this.onStep2BackButtonClick
            },
            "#registerPanelLoginButton": {
                click: this.onRegisterPanelLoginButtonClick
            },
            "#createEventForm1": {
                afterlayout: this.onCreateForm1AfterLayout
            },
            "#createEventForm2": {
                afterlayout: this.onCreateForm2AfterLayout
            },
            "#send": {
                click: this.onSendButtonClick
            },
            "#eventInvitees": {
                beforerender: this.onComboboxBeforeRender
            },
            "#loginFBButton": {
                click: this.onLoginFBButtonClick
            },
            "#myAccountButton": {
                click: this.onMyAccountButtonClick
            },
            "#myCreatedEvents": {
                beforerender: this.onDataviewBeforeRender
            },
            "#createEventButton": {
                click: this.onCreateEventClick
            }
        });
    }

});
